{"version":3,"file":"static/js/81.359e3f7f.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/filesystem/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename}`,\n              to: `${to}/${filename}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","DB_VERSION","DB_NAME","_writeCmds","undefined","this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","store","transaction","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","tx","clear","options","getPath","dbRequest","entry","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","dbIndexRequest","IDBKeyRange","only","depth","match","parentEntry","fullPath","readdir","readDirResult","files","entryPath","name","stat","deleteFile","rmdir","entries","all","map","e","subEntry","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","fromObj","updateTime","readFile","file","writeFile","writeResult","contents","filename","str","err","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin"],"sourceRoot":""}